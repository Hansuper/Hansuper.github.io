<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>charles https</title>
    <link href="/2025/04/24/charles-https/"/>
    <url>/2025/04/24/charles-https/</url>
    
    <content type="html"><![CDATA[<p>charles抓包https时遇到的问题</p><span id="more"></span><p>在使用charles抓包https时，尽管在证书配置完成后，在抓shopify网站的时候却发现无法抓取；可是连google和自建的网站都可以正确抓取，为什么shopify的不行呢？</p><p>在抓取时提示</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">handshake_failure (<span class="hljs-number">40</span>) - Unable <span class="hljs-keyword">to</span> negotiate an acceptable <span class="hljs-keyword">set</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">security</span> parameters, this probably means there are <span class="hljs-keyword">no</span> cipher suites <span class="hljs-keyword">in</span> common<br></code></pre></td></tr></table></figure><p>导致页面无法正常加载、或提示其它证书不正确等信息</p><p>这是因为shopify是采用http2协议和更安全的证书策略，Charles对http2协议支持不是很好</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>1，临时禁用chrome http2请求<br>在windows中，桌面找到chrome右键属性–快捷方式–目标；在引号后边追加 –disable-http2 重启chrome发现所有请求都使用http1.1访问</p><p>2，使用proxyman来代理charles抓包</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>content-security-policy</title>
    <link href="/2025/01/22/content-security-policy/"/>
    <url>/2025/01/22/content-security-policy/</url>
    
    <content type="html"><![CDATA[<p>Content-Security-Policy 简称CSP，内容安全策略</p><span id="more"></span><p>Content-Security-Policy 简称CSP，内容安全策略；了解到该内容还是因为近期网上说B站开发者引入自己服务器的js攻击特定用户<br>除了代码review,也可以通过一定的配置来避免此类事情</p><p>CSP就是在响应header中或者网页meta元素中告诉浏览器应该加载哪些域或路径的资源；从而保证只加载可信任的资源</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">header(&quot;Content-Security-Policy: default-src &#x27;self&#x27;&quot;);<br>return &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://www.baidu.com/test.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>hello world<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>&#x27;;<br><br></code></pre></td></tr></table></figure><p><img src="/img/csp_index.png"></p><p><img src="/img/csp_block.png"></p><p>由于浏览器在加载主页面的时候告诉浏览器是只允许加载同域名下的资源，所以页面中引用百度的资源是无法加载的<br>这样可以有效的避免跨站脚本攻击</p><h3 id="更多用法参考"><a href="#更多用法参考" class="headerlink" title="更多用法参考"></a>更多用法参考</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>让浏览器缓存静态资源</title>
    <link href="/2024/10/22/aliyun-oss-config-cache/"/>
    <url>/2024/10/22/aliyun-oss-config-cache/</url>
    
    <content type="html"><![CDATA[<p>最近在做一些优化的时候，发现浏览器每次都重新请求静态资源</p><span id="more"></span><p>我们的图片、js、css等都存储在阿里云oss上；这些静态资源不会经常变动但每次浏览器刷新都会重新请求资源，造成流量的浪费、拖慢页面加载速度影响用户体验<br>故我们通过设置文件的http头部来让浏览器缓存这些资源</p><h3 id="cache-control"><a href="#cache-control" class="headerlink" title="cache-control"></a>cache-control</h3><p>影响浏览器缓存资源的是http协议中的 <code>cache-control</code>参数</p><p>Cache-Control 头部可以控制文件在客户端缓存的时长。例如：</p><p>Cache-Control: max-age&#x3D;31536000: 设置文件缓存的有效期为一年（31536000 秒）。<br>Cache-Control: no-cache: 禁止缓存。<br>Cache-Control: no-store: 不允许缓存该文件。<br>Cache-Control: public, max-age&#x3D;86400 这个配置表示文件可以被所有类型的缓存服务器(浏览器、CDN、代理服务器)缓存，缓存有效期为1天。<br>Cache-Control: private, max-age&#x3D;3600 这个配置表示文件只能在用户的浏览器中缓存，缓存时间为1小时（3600秒），不会被代理服务器缓存。</p><p><img src="/img/cache.png"></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>1, 如果设置过cache-control后在开发者工具中查看发现没有走缓存<br>答: chrome浏览器在打开开发者工具时会默认禁用缓存</p><p><img src="/img/dev-tool.png"></p><p>2，阿里云oss设置步骤<br>答: 登录阿里云OSS管理控制台–找到要设置缓存的文件–设置文件元数据</p><p>3，新增数据每次都要重复设置吗<br>答: 在上传时配置文件元数据指定cache-control</p><h3 id="links"><a href="#links" class="headerlink" title="links"></a>links</h3><p><a href="https://help.aliyun.com/zh/oss/user-guide/manage-object-metadata-10">阿里云文档</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP使用imap处理邮件</title>
    <link href="/2024/09/26/PHP%E4%BD%BF%E7%94%A8imap%E5%A4%84%E7%90%86%E9%82%AE%E4%BB%B6/"/>
    <url>/2024/09/26/PHP%E4%BD%BF%E7%94%A8imap%E5%A4%84%E7%90%86%E9%82%AE%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>需求: 把接收到的邮件依次分发到不同邮件文件夹，例如第1封邮件到A文件夹第2封到B文件夹第3封到A文件夹</p><span id="more"></span><p>一般邮件客户端只支持按某种关键字来划分到不同文件夹，像这种依次分发就需要我们手动处理<br>发送邮件我们一般都用phpmailer包来发送,但接收邮件该怎么处理呢</p><h3 id="php扩展imap"><a href="#php扩展imap" class="headerlink" title="php扩展imap"></a>php扩展imap</h3><p>imap扩展是用来处理邮件相关的，需要安装、并且检查是否在ini中被禁用</p><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 邮箱配置信息<br><span class="hljs-variable">$hostname</span> = <span class="hljs-string">&#x27;&#123;imap.gmail.com:993/imap/ssl&#125;INBOX&#x27;</span>; <span class="hljs-regexp">//</span>IMAP服务器<br><span class="hljs-variable">$username</span> = <span class="hljs-string">&#x27;****@gmail.com&#x27;</span>;<span class="hljs-regexp">//</span>邮箱<br><span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;******&#x27;</span>; <span class="hljs-regexp">//</span>邮箱授权码<br><span class="hljs-variable">$inbox</span> = imap_open(<span class="hljs-variable">$hostname</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>); <span class="hljs-regexp">//</span>建立连接<br><br><span class="hljs-regexp">//</span>邮箱文件列表<br><span class="hljs-regexp">//</span><span class="hljs-variable">$boxList</span> = imap_list(<span class="hljs-variable">$inbox</span>, <span class="hljs-string">&#x27;&#123;imap.gmail.com:993/imap/ssl&#125;&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>);<br><br><span class="hljs-variable">$search_date</span> = <span class="hljs-string">&#x27;26-Sep-2024&#x27;</span>; <span class="hljs-regexp">//</span>查找某个日期之后的邮件<br><span class="hljs-variable">$emails</span> = imap_search(<span class="hljs-variable">$inbox</span>, <span class="hljs-string">&#x27;SINCE &quot;&#x27;</span> . <span class="hljs-variable">$search_date</span> . <span class="hljs-string">&#x27;&quot;&#x27;</span>); <span class="hljs-regexp">//</span>UNSEEN 未读邮件<br><br>foreach (<span class="hljs-variable">$emails</span> as <span class="hljs-variable">$id</span>) &#123;<br>   imap_mail_move(<span class="hljs-variable">$inbox</span>, <span class="hljs-variable">$id</span>, ‘INBOX.A’); <span class="hljs-regexp">//</span>从收件箱中把该邮件移动到A文件夹<br>&#125;<br>imap_close(<span class="hljs-variable">$inbox</span>);<br><br></code></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>1,要开启邮箱的imap服务并获得授权码<br>2,163的邮箱在建立连接时会提示 login unsafe，解决方案参考<br><a href="https://help.mail.163.com/faqDetail.do?code=d7a5dc8471cd0c0e8b4b8f4f8e49998b374173cfe9171305fa1ce630d7f67ac2eda07326646e6eb0">https://help.mail.163.com/faqDetail.do?code=d7a5dc8471cd0c0e8b4b8f4f8e49998b374173cfe9171305fa1ce630d7f67ac2eda07326646e6eb0</a></p><p><a href="https://blog.csdn.net/LYD521000/article/details/133160119">https://blog.csdn.net/LYD521000/article/details/133160119</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
